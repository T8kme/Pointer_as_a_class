#include <vcl.h>
#include <string.h>
#include "Pointer.h"

// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

// ---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner) : TForm(Owner) {
	DoubleBuffered = true;
	bitmap1 = new Graphics::TBitmap;
	bitmap1->Width = Image1->Width;
	bitmap1->Height = Image1->Height;

	rect1.left = 0;
	rect1.top = 0;
	rect1.right = Image1->Width;
	rect1.bottom = Image1->Height;

	Draw_Shield();
}
// ---------------------------------------------------------------------------

class SamplePointer {
public:
	int angle;
	int value;
	int target;
	int max_value;
	bool auto_mode;
	bool run;
	TColor color1;
	TColor color2;

	SamplePointer() {
		angle = -100;
		value = 0;
		target = 0;
		max_value = 100;
		auto_mode = false;
		run = false;
		color1 = RGB(200, 200, 200);
		color2 = RGB(130, 130, 130);
	}

	void Set_Color(TColor c1, TColor c2) {
		color1 = c1;
		color2 = c2;
	}
};

SamplePointer pointer1; // create object called Pointer1

// ---------------------------------------------------------------------------

void TForm1::Draw_Shield() {
	int size = Image1->Width;
	int center_pos = (size / 2);

	bitmap1->Canvas->Brush->Color = clBtnFace;
	bitmap1->Canvas->Pen->Color = clSkyBlue;
	bitmap1->Canvas->Rectangle(0, 0, size, size);
	bitmap1->Canvas->Brush->Color = clBlack;
	bitmap1->Canvas->Pen->Color = clBlack;
	bitmap1->Canvas->Rectangle(5, 5, 10, 10); // sruby xD
	bitmap1->Canvas->Rectangle(size - 5, size - 5, size - 10, size - 10);
	bitmap1->Canvas->Rectangle(size - 5, 5, size - 10, 10);
	bitmap1->Canvas->Rectangle(5, size - 5, 10, size - 10);

	bitmap1->Canvas->Pen->Width = 0;
	bitmap1->Canvas->Brush->Color = RGB(166, 16, 16);
	bitmap1->Canvas->Ellipse(2, 2, size - 2, size - 2); // red circle outside

	for (int i = 10; i < 52; i++) { // shield inside
		TColor color1 = RGB(185 + i, 155 + i, 0);
		bitmap1->Canvas->Pen->Color = color1;
		bitmap1->Canvas->Brush->Color = color1;
		bitmap1->Canvas->Ellipse(i, i, size - i, size - i);
	}

	bitmap1->Canvas->Brush->Color = RGB(104, 104, 104);

	bitmap1->Canvas->Pen->Width = 2;
	bitmap1->Canvas->Pen->Color = clBlack;

	SetBkMode(bitmap1->Canvas->Handle, TRANSPARENT);

	bitmap1->Canvas->Font->Size = 20;
	bitmap1->Canvas->Font->Name = "Arial";
	bitmap1->Canvas->Font->Color = clBlack;
	bitmap1->Canvas->TextOut(center_pos - (IntToStr(pointer1.value).Length() +
		3) / 2 * 12, 180, IntToStr(pointer1.value) + "%");

	// pointer angle
	pointer1.angle = -100 + ((200.0 / pointer1.max_value) * pointer1.value);

	bitmap1->Canvas->Pen->Width = 0;
	int a = 10;
	int counter = 0;
	int maxStep = 20;

	TPoint p[5]; // podzialka
	for (int i = -15; i <= 15; i++) {
		p[0] = TPoint(center_pos + 110 * Cos(((i * a) + 270) * 3.14 / 180),
			center_pos + 110 * Sin(((i * a) + 270) * 3.14 / 180));
		p[1] = TPoint(center_pos + 130 * Cos(((i * a) + 270 - 4) * 3.14 / 180),
			center_pos + 130 * Sin(((i * a) + 270 - 4) * 3.14 / 180));
		p[2] = TPoint(center_pos + 130 * Cos(((i * a) + 270 + 4) * 3.14 / 180),
			center_pos + 130 * Sin(((i * a) + 270 + 4) * 3.14 / 180));

		bitmap1->Canvas->Pen->Color =
			RGB(255 - (255 / 20) * counter, (255 / 20) * counter, 0);

		bitmap1->Canvas->Brush->Color = RGB(55, 55, 55);
		bitmap1->Canvas->Polygon(p, 2);

		bitmap1->Canvas->Font->Size = 12;
		bitmap1->Canvas->Font->Name = "Comic Sans MS";

		bitmap1->Canvas->Font->Color =
			RGB(255 - (255 / 20) * counter, (255 / 20) * counter, 0);

		SetBkMode(bitmap1->Canvas->Handle, TRANSPARENT); // remove text bckground

		bitmap1->Canvas->TextOut
			(center_pos + 200 * Cos(((i * a) + 270) * 3.14 / 180) +
			15 * Cos(225 * 3.14 / 180),
			center_pos + 200 * Sin(((i * a) + 270) * 3.14 / 180) +
			15 * Sin(225 * 3.14 / 180),
			IntToStr(pointer1.max_value*counter / maxStep));
		counter++;
	}

	// 1 side pointer - left
	bitmap1->Canvas->Pen->Width = 1;
	p[0] = TPoint(center_pos, center_pos);
	p[1] = TPoint(center_pos + 20 * Cos((pointer1.angle + 240) * 3.14 / 180),
		center_pos + 20 * Sin((pointer1.angle + 240) * 3.14 / 180));
	p[2] = TPoint(center_pos + 120 * Cos((pointer1.angle + 270) * 3.14 / 180),
		center_pos + 120 * Sin((pointer1.angle + 270) * 3.14 / 180));
	bitmap1->Canvas->Pen->Color = clBlack;
	bitmap1->Canvas->Brush->Color = pointer1.color1;

	bitmap1->Canvas->Polygon(p, 2);

	// 2 side of pointer - right
	p[0] = TPoint(center_pos, center_pos);
	p[1] = TPoint(center_pos + 120 * Cos((pointer1.angle + 270) * 3.14 / 180),
		center_pos + 120 * Sin((pointer1.angle + 270) * 3.14 / 180));
	p[2] = TPoint(center_pos + 20 * Cos((pointer1.angle + 300) * 3.14 / 180),
		center_pos + 20 * Sin((pointer1.angle + 300) * 3.14 / 180));
	bitmap1->Canvas->Pen->Color = clBlack;
	bitmap1->Canvas->Brush->Color = pointer1.color2;

	bitmap1->Canvas->Polygon(p, 2);

	for (int i = (-size/(10*3))+(size/2); i < (size/(10*3))+(size/2); i++) { // szara tarcza
		bitmap1->Canvas->Ellipse(i, i, size - i, size - i);
	}
/*
 *	if (pointer1.reallyLow) {
 * 1		bitmap1->Canvas->Font->Size = 16;
 *		bitmap1->Canvas->Font->Name = "Courier New";
 *		bitmap1->Canvas->Font->Color = RGB(255, 0, 0);
 *		bitmap1->Canvas->TextOut(450 / 2 - 11 * 12, 180, "NISKIE NA£ADOWANIE!");
 *
 *	}
 */
	Image1->Canvas->CopyRect(rect1, bitmap1->Canvas, rect1);
}

// ---------------------------------------------------------------------------

void __fastcall TForm1::Timer1Timer(TObject *Sender) {

	if (pointer1.run) {
		if (pointer1.value < pointer1.target) {
			if (pointer1.value < pointer1.max_value)
				pointer1.value += 1;

		}

		//pointer1.reallyLow = pointer1.value <= 10;

		if (pointer1.value > pointer1.target)
			if (pointer1.value > 0)
				pointer1.value -= 1;

		if (pointer1.value > pointer1.max_value)
			pointer1.value = pointer1.max_value;

		Draw_Shield();
	}
	if (pointer1.value == pointer1.target) {
		pointer1.run = false;
		pointer1.auto_mode = false;
	}

	//lState->Caption = pointer1.run ? "WYKONYWANIE POMIARU ..." :
	//	"WYBIERZ AKUMULATOR[POMIAR AUTOMATYCZNY]...";

	GroupBox2->Enabled = !pointer1.run;
}

// ---------------------------------------------------------------------------

void TForm1::Set_Auto(int auto_value) {
	pointer1.auto_mode = true;
	// pointer1.value = 0;

	pointer1.target = auto_value;
	pointer1.run = true;
}

// ---------------------------------------------------------------------------

void __fastcall TForm1::ListBox1Click(TObject *Sender) {

	switch (ListBox1->ItemIndex) {
	case 0:
		pointer1.color1 = RGB(0, 0, 255);
		pointer1.color2 = RGB(0, 0, 180);
		break;
	case 1:
		pointer1.color1 = RGB(255, 0, 0);
		pointer1.color2 = RGB(180, 0, 0);
		break;
	case 2:
		pointer1.color1 = RGB(0, 255, 0);
		pointer1.color2 = RGB(0, 180, 0);
		break;
	case 3:
		pointer1.color1 = RGB(255, 255, 0);
		pointer1.color2 = RGB(180, 180, 0);
		break;
	case 4:
		pointer1.color1 = RGB(200, 200, 200);
		pointer1.color2 = RGB(130, 130, 130);
		break;
	}
	Draw_Shield();
}

// ---------------------------------------------------------------------------
void __fastcall TForm1::FormClose(TObject *Sender, TCloseAction &Action) {
	delete bitmap1;
}
// ---------------------------------------------------------------------------
void __fastcall TForm1::SetButtonClick(TObject *Sender) {
	if (StrToInt(EditValue->Text) > 0) {
		pointer1.auto_mode = false;
		//pointer1.value = 0;
		pointer1.target = StrToInt(EditValue->Text);
		pointer1.run = true;
	}
	else {
		EditValue->Text = "0";
	}
}
//---------------------------------------------------------------------------

